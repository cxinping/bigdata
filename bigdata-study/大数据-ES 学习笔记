
# Elasticsearch



## 简绍

Elasticsearch是一个高度可扩展的、开源的、基于 Lucene 的全文搜索和分析引擎。它允许您快速，近实时地存储，搜索和分析大量数据，并支持多租户 

![1162587-20181105224814324-1666171721](.\images\1162587-20181105224814324-1666171721.png)

Elasticsearch也使用Java开发并使用 Lucene 作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的 RESTful API 来隐藏 Lucene 的复杂性，从而让全文搜索变得简单。

不过，Elasticsearch 不仅仅是 Lucene 和全文搜索，我们还能这样去描述它

* 分布式的实时文件存储，每个字段都被索引并可被搜索
* 分布式的实时分析搜索引擎
* 可以扩展到上百台服务器，处理PB级结构化或非结构化数据

所有的这些功能被集成到一个服务里面，你的应用可以通过简单的RESTful API、各种语言的客户端甚至命令行与之交互 





## 基本概念

索引
* 索引含有相同属性的文档集合，相当于数据库

  

* 索引(index)是ElasticSearch对逻辑数据的逻辑存储，所以他可以分为更小的部分。

* 可以把索引看成关系型数据库的表，索引的结构视为快速有效的全文索引准备的，特别是它不存储原始值。

* ElasticSearch可以吧索引存放在一台机器或者分散在多台服务器上，每个索引有一个或多个分片(shard)，每个分片可以有多个副本(replica)。



类型
* 索引可以定义一个或多个类型，文档必须属于一个类型，相当于数据库里的一个表

* 存储子Elasticsearch中的主要实体叫文档(document)，用关系型数据库来类比的话，一个文档相当于数据库中个表的一行记录。
* ElasticSearch和MongoDb中的文档类似，都可以有不同的结构，但ElasticSearch的文档相同字段必须有相同类型。
* 文档由多个字段组成，每个字段可能多次出现在一个文档里，这杨的字段叫多值字段(multivalued)

每个字段的类型，可以是文本，数值，日期等，字段类型也可以是复杂类型，一个字段包含其他文档或者数组。



文档 

* 文档是可以被索引的基本数据单位，相当于表里的一条记录



分片

* 每个索引都有多个分片，每个分片都是一个Lucene索引



备份

* 拷贝一份分片就完成了分片的备份


可以画一个对比图来类比传统关系型数据库

> 关系型数据库 -> Databases(库) -> Tables(表) -> Rows(行) -> Columns(列)

> Elasticsearch -> Indeces(索引) -> Types(类型) -> Documents(文档) -> Fields(属性)


## 下载 Elasticsearch
下载目录
> https://www.elastic.co/cn/downloads/elasticsearch

> https://mirrors.huaweicloud.com/



## 安装 Elasticsearch




### 安装JDK
略


### 关闭防火墙
关闭防火墙，并禁止开机启动
```
systemctl stop firewalld.service  

systemctl disable firewalld.service  
```




### 安装 Elasticsearch

解压：

``` 
tar -zvxf elasticsearch-7.7.1-linux-x86_64.tar.gz
```
给解压缩的文件夹改名
```
mv elasticsearch-7.7.1 elasticsearch
```

elasticsearch不能以root账户启动，需新建一个用户启动
```
useradd  es 
chown  -R  es:es /soft/elasticsearch

passwd es
```
给用户es设置密码123456


然后切换到es用户，重新启动elasticsearch

```
su es
```
elasticsearch 不需要特别的配置，只需要启动即可，切到elasticsearch的目录下进行启动：bin/elasticsearch
```
cd /soft/elasticsearch/bin

./elasticsearch
```

后台启动elasticsearch

```
./elasticsearch -d
```

启动完成后，可使用命令 curl http://localhost:9200  验证服务是否开启成功

> curl http://localhost:9200

得到如下结果
```
[root@localhost ~]# curl http://localhost:9200
{
  "name" : "localhost.localdomain",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "3B2WRq8lQfeYPSs8oXY4PA",
  "version" : {
    "number" : "7.7.1",
    "build_flavor" : "default",
    "build_type" : "tar",
    "build_hash" : "ad56dce891c901a492bb1ee393f12dfff473a423",
    "build_date" : "2020-05-28T16:30:01.040088Z",
    "build_snapshot" : false,
    "lucene_version" : "8.5.1",
    "minimum_wire_compatibility_version" : "6.8.0",
    "minimum_index_compatibility_version" : "6.0.0-beta1"
  },
  "tagline" : "You Know, for Search"
}
```

### 允许外网连接服务配置

上节的配置只能在本机使用，但是要想为集群或者其他的机器连接，则需要做以下配置

1, 修改/soft/elasticsearch-7.7.1/config /elasticsearch.yml文件

把 network.host 和 http.port 前面的# 备注去掉 然后Host改成你的机器的IP即可
```
vi /soft/elasticsearch/config/elasticsearch.yml
```
修改以下内容， 
```
# Set the bind address to a specific IP (IPv4 or IPv6):
#
network.host: 0.0.0.0
#
# Set a custom port for HTTP:
#
http.port: 9200

cluster.initial_master_nodes: ["node-1", "node-2"]
```
修改后，保存退出



2,为防止bootstrap checks failed报错，进行以下修改

1>编辑 /etc/security/limits.conf，追加以下内容；

```
* soft nofile 65536

* hard nofile 131072

* soft nproc 4096

* hard nproc 4096
```

追加后，保存退出。此文件修改后需要重新登录用户，才会生效

2>编辑 /etc/sysctl.conf，追加以下内容：
```
vm.max_map_count=655360
```
保存后，执行以下命令，使配置文件生效。
```
sysctl -p
```



重启机器
执行命令 # reboot  重启机器，使用es用户登录，再次启动elasticsearch，启动完成后，使用外部浏览器请求 

> http://192.168.11.10:9200

### 安装ElasticSearch head插件

ElasticSearch head是一款 对elasticsearch集群管理工具、数据可视化、增删改查工具， Elasticsearch  语句可视化，使用起来也非常方便。下面提供一下安装方式。
在github上开源了这个插件 ，点击 下载链接 至github上下载插件
> https://github.com/mobz/elasticsearch-head

我们可以看到，在其主页也提供了一些安装方式，使用谷歌插件安装还是比较方便的，下载es-head-master.zip，解压后会有一个 elasticsearch-head.crx文件，将其更名为elasticsearch-head.rar 后再解压，将_metadata文件夹重命名为metadata。

打开谷歌浏览器的扩展程序,点击浏览器右上角 ,此时安装完成，你就可以使用elasticsearch-head连接到你的elasicsearch服务器

![es4](.\images\es4.jpg)


# 快速入门

Restful API

> API基本格式 http://<ip>:<port>/<索引>/<类型>/<文档id>



常用HTTP动词

> GET/PUT/POST/DELETE



## 创建索引

选择 索引选项，点击新建索引按钮

![es5](.\images\es5.jpg)

切换回 概览选项，会多了一个book索引

![es6](.\images\es6.jpg)



切换到复合查询

http://192.168.11.10:9200/
book/novel/_mappings?include_type_name=true
POST

{
    "novel": {
        "properties": {
            "title": {
                "type": "text"
            }
        }
    }
}

在Elastic Head插件里，发送请求比较麻烦，推荐使用PostMan发送请求

例子 创建索引

http://192.168.11.10:9200/people?include_type_name=true
PUT

{
    "settings": {
        "number_of_shards": 3,
        "number_of_replicas": 1
    },
    "mappings": {
        "properties": {
            "name": {
                "type": "text"
            },
            "country": {
                "type": "keyword"
            },
            "age": {
                "type": "integer"
            },
            "date": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"
            }
        }
    }
}



## 插入

插入
* 指定文档id插入
* 自动产生文档id插入

1,使用PostMan发送请求,指定id
http://192.168.11.10:9200/people/man/1
PUT
{
    "name": "瓦力",
    "country": "China",
    "age": 30,
    "date": "1987-03-07"
}


点击''数据浏览''栏

![es7](.\images\es7.jpg)




2,不指定ID
http://192.168.11.10:9200/people/man/
POST
{
    "name": "超级瓦力",
    "country": "China",
    "age": 30,
    "date": "1977-03-07"
}


## 修改 

修改

* 直接修改文档
* 脚本修改文档

http://192.168.11.10:9200/people/man/1/_update
POST

{
   "doc":{
       "name":"谁是瓦力"
   }
}



## 删除


http://192.168.11.10:9200/people/man/1
DELETE
{
  "query":{
    "term":{
      "_id": "b2j2W3YBohneJ1oppn4Y"
    }
  }
}



## 查询



http://192.168.11.10:9200/people/man/1 

GET

返回值：
{
    "_index": "people",
    "_type": "man",
    "_id": "1",
    "_version": 2,
    "_seq_no": 2,
    "_primary_term": 1,
    "found": true,
    "_source": {
        "name": "谁是瓦力1",
        "country": "China",
        "age": 30,
        "date": "1977-03-07"
    }
}







# Python操作ES

Python Elasticsearch Client 官网
> https://elasticsearch-py.readthedocs.io/en/7.10.0/

安装elasticsearch模块

> pip install elasticsearch


## 创建索引


创建一个索引（Index），使用python创建一个名为 news 的索引

```
from elasticsearch import Elasticsearch

def create_index():
    es = Elasticsearch(['192.168.11.10:9200'] )
    result = es.indices.create(index='news', ignore=400)
    print(result)
```
返回值：
```
{'acknowledged': True, 'shards_acknowledged': True, 'index': 'news'}
```

返回结果是 JSON 格式，其中的 acknowledged 字段表示创建操作执行成功

## 删除 Index

```
from elasticsearch import Elasticsearch

def delete_index():
    es = Elasticsearch(['192.168.11.10:9200'])
    result = es.indices.delete(index='news', ignore=[400, 404])
    print(result)
```
返回值：

```
{'acknowledged': True}
```


## 插入数据

Elasticsearch 就像 MongoDB 一样，在插入数据的时候可以直接插入结构化字典数据，插入数据可以调用 create() 方法，例如这里插入一条新闻数据

```
from elasticsearch import Elasticsearch

def create_data():
    es = Elasticsearch(['192.168.11.10:9200'])
    es.indices.create(index='news', ignore=400)

    data = {'title': '测试数据', 'url': 'http://www.163.com'}
    result = es.create(index='news', doc_type='politics', id=1, body=data)
    print(result)
```

这里声明了一条新闻数据，包括标题和链接，然后通过调用 create() 方法插入了这条数据，在调用 create() 方法时，我们传入了四个参数，index 参数代表了索引名称，doc_type 代表了文档类型，body 则代表了文档具体内容，id 则是数据的唯一标识 ID

返回值：

```
{'_index': 'news', '_type': 'politics', '_id': '1', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, '_seq_no': 0, '_primary_term': 1}
```

### 更新数据

更新数据也非常简单，需要指定数据的 id 和内容，调用 update() 方法即可
```
from elasticsearch import Elasticsearch

def update_data():
    es = Elasticsearch(['192.168.11.10:9200'])
    data = {'title': '测试数据aaa',
            'url': 'http://www.163.com'
            }
    result = es.update(index='news', doc_type='politics', body=data, id=1)
    print(result)
```

### 删除数据

如果想删除一条数据可以调用 delete() 方法，指定需要删除的数据 id 即可

```
from elasticsearch import Elasticsearch

def delete_data():
    es = Elasticsearch(['192.168.11.10:9200'])
    result = es.delete(index='news', doc_type='politics', id=1)
    print(result)
```

### 查询

安装分词扩展插件，对于中文来说，需要安装一个分词插件，这里使用的是 elasticsearch-analysis-ik，GitHub 链接为：https://github.com/medcl/elasticsearch-analysis-ik，这里我们使用 Elasticsearch 的另一个命令行工具 elasticsearch-plugin 来安装，这里安装的版本是 7.7.1，请确保和 Elasticsearch 的版本对应起来

```
elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.1/elasticsearch-analysis-ik-7.7.1.zip

elasticsearch-plugin install elasticsearch-analysis-ik-7.7.1.zip 
```

这里的版本号请替换成你的 Elasticsearch 的版本号。

安装之后重新启动 Elasticsearch 就可以了，它会自动加载安装好的插件

新建一个索引并指定需要分词的字段

```
from elasticsearch import Elasticsearch

def create_index_cn():
    es = Elasticsearch(['192.168.11.10:9200'])
    mapping = {
        'properties': {
            'title': {
                'type': 'text',
                'analyzer': 'ik_max_word',
                'search_analyzer': 'ik_max_word'
            }
        }
    }
    es.indices.delete(index='news', ignore=[400, 404])
    es.indices.create(index='news', ignore=400)
    result = es.indices.put_mapping(index='news', doc_type='politics', body=mapping)
    print(result)
```











# 参考资料
```
https://www.cnblogs.com/wwjj4811/p/13054685.html

https://www.cnblogs.com/guoxiangyue/archive/2004/01/13/9635232.html

https://www.cnblogs.com/wwjj4811/p/13051006.html

Elasticsearch 技术分析
https://www.cnblogs.com/jajian/p/9976900.html

https://blog.csdn.net/wufaliang003/article/details/81368365

安装 kibana 
https://www.cnblogs.com/wwjj4811/p/13054855.html

全文搜索引擎 ElasticSearch 还是 Solr？
https://www.cnblogs.com/jajian/p/9801154.html
```
